#Implement asymeetric ago and key exchange algo

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Util import number

#RSA Encryption
def rsa_encrypt(message, public_key):
    cipher = PKCS1_OAEP.new(public_key)
    ciphertext= cipher.encrypt(message)
    return ciphertext

def rsa_decrypt(ciphertext, private_key):
    cipher= PKCS1_OAEP.new(private_key)
    plaintext= cipher.decrypt(ciphertext)
    return plaintext

#Diffie-Hellman Key Exchange

def diffie_hellman():
    #generate prime number and generator
    p=number.getPrime(128)
    g=2
    
    #choose private key
    private_key=number.getRandomRange(2, p-2)
    
    #Compute public key
    public_key=pow(g, private_key, p)
    
    return p,g,private_key,public_key

#example Usage
message=b'This is a secret msg'

rsa_key=RSA.generate(2048)

encrypted_message = rsa_encrypt(message, rsa_key.public_key())
decrypted_message = rsa_decrypt(encrypted_message, rsa_key)

print("Decrypted message", decrypted_message.decode('utf-8'))

p,g,private_key,public_key = diffie_hellman()
print("public key generated by diffie-hellman", public_key)